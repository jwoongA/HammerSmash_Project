using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public enum ObstacleType
{
    Overhead,      // 상단 장애물 (슬라이딩으로 피하기)
    Ground,        // 하단 장애물 (점프해서 피하기)
    FallHole,      // 떨어지는 구멍 장애물 (점프해서 피하기)

}

namespace runner
{
    public class Obstacle : MonoBehaviour
    {
        [Header("장애물 종류")]
        public ObstacleType obstacleType;


        [Tooltip("장애물 간 간격 범위")]
        [SerializeField] private float minSpacing = 2f; //장애물 최소 간격
        [SerializeField] private float maxSpacing = 10f; //장애물 최대 간격

        [Header("고정 위치 설정")]
        [SerializeField] private Vector3[] fixedPositions;

        [Header("피격 관련 설정")]
        [SerializeField] private float damage = 10f;

        [SerializeField] private int spawnIndex = 0; //장애물 고정위치 인덱스

        void Start()
        {
            //시작할 때 장애물 위치와 크기를 설정
            SetupObstacleShape();
        }

        void Update()
        {
            //장애물 이동 속도 (플레이어에게 다가오는 느낌)
            transform.Translate(Vector3.left * Time.deltaTime * 5f);

            //화면 밖으로 나가면 삭제
            if (transform.position.x < -20f)
                Destroy(gameObject);
        }

        private void SetupObstacleShape()
        {
            // 고정 위치에서 현재 장애물의 위치를 설정
            if (spawnIndex < fixedPositions.Length)
                transform.position = fixedPositions[spawnIndex];

        }

        private void OnTriggerEnter2D(Collider2D other)
        {
            if (other.CompareTag("Player"))
            {
                //Player player = other.GetComponent<Player>();
                //if (player != null)
                //{
                //        player.OnHit(damage); //플레이어에게 데미지

                //    //플레이어가 망치 아이템 사용 중이면 장애물 파괴
                //    if (player.hasHammer)
                //    {
                //        Destroy(gameObject); //장애물 파괴
                //        return;
                //    }
                //}
            }
        }


        public void SetSpawnIndex(int index)
        {
            spawnIndex = index;
        }

    }
}
